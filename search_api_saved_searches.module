<?php

/**
 * @file
 * Allows visitors to bookmark searches and get notifications for new results.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityMalformedException;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\search_api\IndexInterface;
use Drupal\search_api_saved_searches\Entity\SavedSearch;
use Drupal\search_api_saved_searches\Entity\SavedSearchAccessControlHandler;
use Drupal\search_api_saved_searches\Plugin\search_api_saved_searches\notification\Email;
use Drupal\search_api_saved_searches\SavedSearchesException;

/**
 * Implements hook_cron().
 */
function search_api_saved_searches_cron() {
  \Drupal::getContainer()
    ->get('search_api_saved_searches.new_results_check')
    ->checkAll();
}

/**
 * Implements hook_entity_field_storage_info().
 */
function search_api_saved_searches_entity_field_storage_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() !== 'search_api_saved_search') {
    return [];
  }

  // Add field storage definitions for all notification plugin-provided fields.
  $fields = [];

  $bundles = \Drupal::getContainer()
    ->get('entity_type.bundle.info')
    ->getBundleInfo('search_api_saved_search');
  foreach (array_keys($bundles) as $bundle) {
    // We don't use the $base_field_definitions parameter in that method, so no
    // need to retrieve those for passing them here.
    $fields += SavedSearch::bundleFieldDefinitions($entity_type, $bundle, []);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_delete() for type "search_api_index".
 */
function search_api_saved_searches_search_api_index_delete(IndexInterface $index) {
  // Delete all saved searches that used this index.
  $ids = \Drupal::entityQuery('search_api_saved_search')
    ->condition('index_id', $index->id())
    ->execute();
  if ($ids) {
    try {
      $storage = \Drupal::entityTypeManager()
        ->getStorage('search_api_saved_search');
      $searches = $storage->loadMultiple($ids);
      if ($searches) {
        $storage->delete($searches);
      }
    }
    // @todo Use multi-catch for InvalidPluginDefinitionException and
    //   EntityStorageException once we depend on PHP 7.1+.
    catch (\Exception $e) {
      $args['%index'] = $index->label();
      $args['@index_id'] = $index->id();
      watchdog_exception('search_api_saved_searches', $e, '%type while trying to delete saved searches on deleted index %index (@index_id): @message in %function (line %line of %file).', $args);
    }
  }
}

/**
 * Implements hook_mail().
 *
 * Implemented on behalf of the "E-mail" notification plugin.
 *
 * @see \Drupal\search_api_saved_searches\Plugin\search_api_saved_searches\notification\Email
 */
function search_api_saved_searches_mail($key, &$message, $params) {
  if (empty($params['plugin'])) {
    return;
  }
  $plugin = $params['plugin'];
  if (!($plugin instanceof Email)) {
    return;
  }

  switch ($key) {
    case Email::MAIL_ACTIVATE:
      $plugin->getActivationMail($message, $params);
      break;

    case Email::MAIL_NEW_RESULTS:
      $plugin->getNewResultsMail($message, $params);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for type "search_api_saved_search".
 *
 * Implemented on behalf of the "E-mail" notification plugin.
 *
 * @see \Drupal\search_api_saved_searches\Plugin\search_api_saved_searches\notification\Email
 */
function search_api_saved_searches_search_api_saved_search_presave(EntityInterface $search) {
  // Don't check searches that are already disabled.
  if (!$search->get('status')->value) {
    return;
  }

  // Admins also generally don't have to activate saved searches they create.
  $admin_permission = SavedSearchAccessControlHandler::ADMIN_PERMISSION;
  if (\Drupal::currentUser()->hasPermission($admin_permission)) {
    return;
  }

  try {
    /** @var \Drupal\search_api_saved_searches\SavedSearchInterface $search */
    $type = $search->getType();

    // If the type doesn't use the "E-mail" notification plugin, we're done.
    if (!$type->isValidNotificationPlugin('email')) {
      return;
    }
    // Otherwise, check whether the "Activation mail" setting is even enabled.
    $plugin = $type->getNotificationPlugin('email');
    if (!$plugin->getConfiguration()['activate']['send']) {
      return;
    }

    // Don't check searches that aren't new, unless the mail address changed.
    $mail = $search->get('mail')->value;
    if (!$search->isNew() && $mail == $search->original->get('mail')->value) {
      return;
    }

    $owner = $search->getOwner();
    // If we couldn't get the owner, we can't really check further, so bail.
    if (!$owner) {
      // To avoid having to duplicate the complicated logging logic below, just
      // throw an exception.
      throw new SavedSearchesException('Saved search does not specify a valid owner.');
    }

    // If the owner is a registered user and used their own e-mail address,
    // there's no need for an activation mail.
    if (!$owner->isAnonymous() && $owner->getEmail() === $mail) {
      return;
    }

    // De-activate the saved search.
    $search->set('status', FALSE);

    // Unfortunately, we can't send the activation mail right away, as the saved
    // search doesn't have an ID set yet (unless this is an update), so we can't
    // get the activation URL. We therefore queue the mail to be sent at the end
    // of the page request.
    $params = [
      'search' => $search,
      'plugin' => $plugin,
    ];
    \Drupal::getContainer()->get('search_api_saved_searches.email_queue')
      ->queueMail([
        'search_api_saved_searches',
        Email::MAIL_ACTIVATE,
        $mail,
        $owner->getPreferredLangcode(),
        $params,
      ]);

  }
  // @todo Use multi-catch for SavedSearchesException and
  //   InvalidArgumentException once we depend on PHP 7.1+.
  catch (\Exception $e) {
    $context['%search_label'] = $search->label();
    if (!$search->isNew()) {
      $context['%search_label'] .= ' (#' . $search->id() . ')';
      try {
        $context['link'] = $search->toLink(t('View saved search'), 'edit-form')
          ->toString();
      }
      catch (EntityMalformedException $e) {
        // Ignore.
      }
    }
    watchdog_exception('search_api_saved_searches', $e, '%type while preprocessing saved search %search_label before saving: @message in %function (line %line of %file).', $context);
  }
}
